behavior Exercise
    js 
        function addQueryParam(url, param, value) {
            let baseUrl = window.location.origin; 
            let urlObject = new URL(url, baseUrl); 
            urlObject.searchParams.append(param, value);
            return urlObject.toString();
        }
        function setQueryParam(url, param, value) {
            let baseUrl = window.location.origin; 
            let urlObject = new URL(url, baseUrl); 
            urlObject.searchParams.set(param, value);
            return urlObject.toString();
        }
    end

    def setExerciseURL()
        if url == undefined
            set global url to '/api/term/exercise/'
            for container in document.querySelectorAll('.multiple-select')
                for checkbox in container.querySelectorAll('.option-checkbox')
                    if checkbox.checked
                        set global url to addQueryParam(url, checkbox@name, checkbox@value)
                    end
                end
            end
        end
        if seed == undefined
            set global seed to Math.random()
            set global url to setQueryParam(url, "seed", seed)
        end
        if page == undefined
            set global page to 0
        end
        set global page to (page + 1)
        set global url to setQueryParam(url, "page", page)
    end

    def fetchExercise()
        setExerciseURL()
        fetch `${url}` as Object then put the result into response 
        if response.items.length == 0
            go to url '/exercise/'
        else
            set global exercises to response.items
        end
    end

    def loadExercise()
        if exercises.length == 0
            call fetchExercise()
        end
        set exercise to exercises.shift()
        htmx.ajax('GET', `/exercise/partial/view/${exercise.id}/${exercise.type}?url=${exercise.url}`, '#exercise-main-content')
    end

    js 
    let seconds = 0;
    let timerInterval = null;

    function startTimer() {
        timerElement = document.getElementById('timer')

        if (timerInterval !== null) {
            return;
        }

        timerInterval = setInterval(() => {
            seconds++;
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
        }, 1000);
    }

    function incrementStats(type) {
        const elements = {
          streak: document.getElementById('streak'),
          correct: document.getElementById('correct'),
          incorrect: document.getElementById('incorrect')
        };
      
        let currentValue = parseInt(elements[type].textContent) || 0;
        elements[type].textContent = currentValue + 1;
    }

    function mergeResponse(response, answer) {
        return  { ...response, answer: { ...answer } };
    }
    end

    def checkExercise(url, answer)
        set bodyContent to mergeResponse(response, answer as Object)
        fetch `${url}` as Object with method:"POST",body: bodyContent as JSON put it into exerciseResult
        call updateStats(exerciseResult.correct)
        return exerciseResult
    end

    def updateStats(correct)
        if correct
            incrementStats("correct")
            incrementStats("streak")
        else
            incrementStats("incorrect")
            set document.getElementById("streak").textContent to 0
        end
    end

    def setMessageContent(exerciseResult)
        set resultElement to document.getElementById("exercise-result-message")
        if exerciseResult.correct
            set colorClass to "text-green-400"
        else
            set colorClass to "text-red-400"
        end
        make a <span/> then add .{colorClass} to it
        set its textContent to exerciseResult.feedback
        put it into resultElement
    end
end